#lang racket

(require "project.rkt")

; This file uses Racket's unit-testing framework, which is convenient but not required of you.

(require rackunit)


(define tests
  (test-suite
   "Project Tests"

   ; arithmetic functions test
     
   (check-equal? (numexlist->racketlist
                  (eval-exp (apply (apply numex-all-gt (num 5))
                                  (racketlist->numexlist 
                                   (list (num 10) (num 4) (num 5) (num 15))))))
                 (list (num 10) (num 15))
                 "test45")

(test-equal? "test58"
               (num 2)
               (eval-exp (with "f1"
                               (lam "f1" "a" (with "x" (var "a") (lam "f2" "z" (plus (var "x") (num 1)))))
                               (with "f3" (lam "f3" "f" (with "x" (num 1729) (apply (var "f") (munit)))) 
                                     (apply (var "f3") (apply (var "f1") (num 1)))))))

(test-equal? "test59"
               (num 43)
               (eval-exp (apply (lam "incr" "x" (plus (var "x") (num 1))) (num 42))))


(test-equal? "test60"
               (bool #t)
               (eval-exp (apply (lam "neg" "x" (neg (var "x"))) (bool #f))))


(test-equal? "test61"
               (num 10)
               (eval-exp (apply (lam "mul" "x" (neg (mult (var "x") (num 2)))) (num -5))))

   (check-equal? (eval-exp (with "s" (num 4)
                                 (div (num 12) (var "s")))) (num 3) "test64")


  (test-equal? "test66"
     (num 6)
     (eval-exp (with "fnc"
       (lam "f1" "x" 
            (ifneq (ismunit (var "x")) (bool #f) 
                       (num 0) 
                       (plus (1st (var "x")) (apply (var "f1") (2nd (var "x"))))))
       (apply (var "fnc") (apair (num 1) (apair (num 2) (apair (num 3) (munit))))))))

   
   (check-equal? (eval-exp (apply (lam "a" "b" (ifleq (var "b") (num 5) (plus (var "b") (num 3))
                                                      (apply (var "a") (mult (num 2) (num 3)))))
                                  (num 2))) (num 5) "test70")
   
(check-equal? (eval-exp (apply (lam "fact" "n" 
           (cnd (iseq (var "n") (num 0)) 
                   (num 1) 
                   (mult (var "n") (apply (var "fact") (minus (var "n") (num 1))
           )))) (num 5)))
               (num 120) "test71")

   (check-equal? (eval-exp (with* (list (cons "f" (num 2)) (cons "y" (var "f"))) (plus (var "f") (plus (var "y") (num 3))))) (num 7) "test72")
   
    (check-equal? (num 1)
     (eval-exp (with* (cons (cons "x" (num 1)) null) (var "x")))
     "test78")

    (check-equal? 
    (bool #t)
     (eval-exp (with* (list (cons "f" (num 2)) (cons "y" (bool #t))) (ifneq (var "f") (num 2) (bool #f) (var "y"))))
     "test79")


    
     
    (check-equal? (eval-exp (closure '() (lam null "x" (var "x"))))
                 (closure '() (lam null "x" (var "x"))) "test90")


    (check-equal? (eval-exp (with "x" (andalso (bool #t) (bool #t)) (orelse (bool #f) (var "x")))) (bool #t) "test 91")
   (check-equal? (eval-exp (with "x" (num 1) (var "x"))) (num 1) "test92")
   
    (check-equal? (eval-exp (lam null "x" (var "x")))
                 (closure '() (lam null "x" (var "x"))) "test94")
   (check-equal? (eval-exp (with "x" (num 1) (lam null "a" (var "x"))))
                 (closure (list (cons "x" (num 1))) (lam null "a" (var "x"))) "test95")


   (check-equal? (eval-exp (with "x" (num 1) (apair (var "x") (var "x"))))
                 (apair (num 1) (num 1)) "test99")


   (check-equal? (eval-exp (with "x" (apair (num 1) (bool #t)) (1st (var "x")))) (num 1) "test101")
   (check-equal? (eval-exp (with "x" (apair (num 1) (bool #t)) (2nd (var "x")))) (bool #t) "test104")
   (check-equal? (eval-exp (with "x" (munit) (ismunit (var "x")))) (bool #t) "test107")
   (check-equal? (eval-exp (with "x" (num 0) (ismunit (var "x")))) (bool #f) "test109")


   (check-equal? (eval-exp (with "double" (lam "double" "x" (plus (var "x") (var "x")))
                                  (apply (var "double") (num 10))))
                 (num 20) "test110")

      (check-equal?
    (eval-exp
     (with "range"
           (lam "range" "lo"
                (lam null "hi"
                     (ifleq  (var "hi") (var "lo") (munit)
                                (apair (var "lo") (apply (apply (var "range") (plus (num 1) (var "lo"))) (var "hi"))))))
           (apply (apply (var "range") (num 5)) (num 8))))
    (apair (num 5) (apair (num 6) (apair (num 7)  (munit)))) "test111")


      (check-equal?
 (eval-exp (apply (lam "a" "b" (ifleq (num 5) (var "b") (plus (var "b") (num 3))
                         (apply (var "a") (mult (num 2) (num 3))  ))) (num 2))
             )(num 9) "test112")


      (check-equal?
 (eval-exp (apply (lam "a" "b" (ifneq (var "b") (num 1) 
                         (with "b" (plus (var "b") (num -1)) (apply (var "a") (var "b")  ))
                         (num 3)
                         )) (num 2))
            ) (num 3) "test113")
;;

      (check-equal?
 (eval-exp (apply (apply (apply (lam "a" "b" (lam "x" "y" (lam "w" "r" (neg (mult (plus (var "b") (var "y")) (var "r"))))))
                       (num 2))
                       (num 3))
                       (num 5))
            ) (num -25) "test114")

      
(check-equal?
 (eval-exp (apply (lam "a" "b" (ifnzero (var "b") 
                                      (with* (list (cons "b" (plus (var "b") (num -1)))) (plus (num 1) (apply (var "a") (var "b"))))
                                      (num 3)
                                      )) (num 2))
             )(num 5) "test115")
;;

   (check-exn exn:fail? (lambda () (eval-exp (apply (num 1) (num 2)))) "test116")


(check-equal? (eval-exp (with* (list (cons "x" (num 1)) (cons "y" (num 2))) (plus (var "x")(var "y"))))
                 (num 3) "test118")
   (check-equal? (eval-exp (with* (list (cons "x" (bool #t))) (var "x")))
                 (bool #t) "test119")
   (check-equal? (eval-exp (with* (list (cons "x" (num 1)) (cons "x" (num 2))) (var "x")))
                 (num 2) "test120")

(check-equal? (eval-exp
                  (apply (apply numex-filter (lam null "x" (plus (num 1) (var "x"))))
                   (apair (num 1) (apair (num 2) (munit)))))
                 (apair (num 2) (apair (num 3) (munit))) "test121")

(check-equal? (eval-exp
                  (apply (apply numex-filter (lam null "x" (minus (num 1) (var "x"))))
                   (apair (num 1) (apair (num 2) (munit)))))
                 (apair (num -1) (munit)) "test122")

(check-equal? (eval-exp
                  (apply (apply numex-filter (lam null "x" (mult (num 0) (var "x"))))
                   (apair (num 1) (apair (num 2) (munit)))))
                 (munit) "test123")

(check-equal? (eval-exp
                  (apply (apply numex-filter (lam null "x" (num 0)))
                   (apair (bool #t) (apair (num 2) (munit)))))
                 (munit) "test124")
(check-equal? (eval-exp
                  (apply (apply numex-filter (lam null "x" (minus (num 1) (var "x"))))
                    (munit)))
                 (munit) "test125")


(check-equal? (eval-exp
                  (apply (apply numex-filter (lam null "x" (div (num 1) (var "x"))))
                   (apair (num 2) (apair (num 1) (apair (num -2) (munit))))))
                 (apair (num 1) (munit)) "test126")

(check-equal? (eval-exp
                  (apply (apply numex-all-gt (num 1) )
                   (apair (num 2) (apair (num 1) (apair (num -2) (munit))))))
                 (apair (num 2) (munit)) "test127")

(check-equal? (eval-exp
                  (apply (apply numex-all-gt (num 2) )
                   (apair (num 2) (apair (neg (num 2)) (apair (num -2) (munit))))))
                 (munit) "test128")

(check-equal? (eval-exp
                  (apply (apply numex-all-gt (num -2) )
                   (munit)))
                 (munit) "test129")

(check-exn exn:fail? (lambda () (eval-exp
                  (apply (apply numex-all-gt (bool #t) )
                   (apair (num 2) (apair (num 2) (apair (num -2) (munit)))))))
                  "test130")

(check-exn exn:fail? (lambda () (eval-exp
                  (apply (apply numex-all-gt (num 2) )
                   (apair (num 2) (apair (bool #t) (apair (num -2) (munit)))))))
                  "test131")

(check-equal? (eval-exp (letrec "is-even" (lam null "n" (orelse (iseq (var "n") (num 0)) (apply (var "is-odd") (minus (var "n") (num 1))))) "is-odd" (lam null "n" (andalso (neg (iseq (var "n") (num 0))) (apply (var "is-even") (minus (var "n") (num 1))))) "temporary-1" (num 1) "temporary-2" (num 2) (apply (var "is-odd") (num 11)))) (bool #t) "test138")
(check-equal? (eval-exp (letrec "is-even" (lam null "n" (orelse (iseq (var "n") (num 0)) (apply (var "is-odd") (minus (var "n") (num 1))))) "is-odd" (lam null "n" (andalso (neg (iseq (var "n") (num 0))) (apply (var "is-even") (minus (var "n") (num 1))))) "temporary-1" (num 1) "temporary-2" (num 2) (apply (var "is-odd") (num 10)))) (bool #f) "test139")
(check-equal? (eval-exp (letrec "is-even" (lam null "n" (orelse (iseq (var "n") (num 0)) (apply (var "is-odd") (minus (var "n") (num 1))))) "is-odd" (lam null "n" (andalso (neg (iseq (var "n") (num 0))) (apply (var "is-even") (minus (var "n") (num 1))))) "temporary-1" (num 1) "temporary-2" (num 2) (apply (var "is-even") (num 11)))) (bool #f) "test140")
(check-equal? (eval-exp (letrec "is-even" (lam null "n" (orelse (iseq (var "n") (num 0)) (apply (var "is-odd") (minus (var "n") (num 1))))) "is-odd" (lam null "n" (andalso (neg (iseq (var "n") (num 0))) (apply (var "is-even") (minus (var "n") (num 1))))) "temporary-1" (num 1) "temporary-2" (num 2) (apply (var "is-even") (num 10)))) (bool #t) "test141")

   ))


(require rackunit/text-ui)
(require rackunit/log)
;; runs the test
;(run-tests tests)


(define result (run-tests tests))

(define out (open-output-file "grade.txt" #:exists 'replace))
(pretty-write (- 100 result) out #:newline? #t)
(pretty-write (test-log) out #:newline? #f)
(close-output-port out)

;(define out2 (open-output-file "summary.txt" #:exists 'replace))
;(write (test-log) out2)
;(close-output-port out2)